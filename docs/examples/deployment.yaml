# Exemplo de Deployment - Guidelines Simplificadas

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/component: {{ .Values.component | default "application" | quote }}
    app.kubernetes.io/part-of: "{{ .Chart.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Chart.Name }}"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Chart.Name }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/component: {{ .Values.component | default "application" | quote }}
        app.kubernetes.io/part-of: "{{ .Chart.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    spec:
      containers:
      - name: "{{ .Chart.Name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        ports:
        - name: http
          containerPort: {{ .Values.port | default 80 }}
          protocol: TCP
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        # =============================================================================
        # HEALTH CHECKS (Configuração Opcional)
        # =============================================================================
        # Health checks garantem que a aplicação está funcionando corretamente
        # e o Kubernetes pode reiniciar containers problemáticos automaticamente
        
        {{- if .Values.healthcheck.enabled }}
        # STARTUP PROBE: Para aplicações que demoram para inicializar (ex: Java, Spring Boot)
        {{- if .Values.healthcheck.startup.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.healthcheck.startup.path | default "/health" }}
            port: {{ .Values.healthcheck.startup.port | default "http" }}
          initialDelaySeconds: {{ .Values.healthcheck.startup.initialDelaySeconds | default 10 }}
          periodSeconds: {{ .Values.healthcheck.startup.periodSeconds | default 10 }}
          timeoutSeconds: {{ .Values.healthcheck.startup.timeoutSeconds | default 5 }}
          failureThreshold: {{ .Values.healthcheck.startup.failureThreshold | default 30 }}
        {{- end }}

        # LIVENESS PROBE: Kubernetes reinicia container se este check falhar
        {{- if .Values.healthcheck.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthcheck.liveness.path | default "/health" }}
            port: {{ .Values.healthcheck.liveness.port | default "http" }}
          initialDelaySeconds: {{ .Values.healthcheck.liveness.initialDelaySeconds | default 30 }}
          periodSeconds: {{ .Values.healthcheck.liveness.periodSeconds | default 10 }}
          timeoutSeconds: {{ .Values.healthcheck.liveness.timeoutSeconds | default 5 }}
          failureThreshold: {{ .Values.healthcheck.liveness.failureThreshold | default 3 }}
        {{- end }}

        # READINESS PROBE: Kubernetes remove pod do Service se este check falhar
        {{- if .Values.healthcheck.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthcheck.readiness.path | default "/ready" }}
            port: {{ .Values.healthcheck.readiness.port | default "http" }}
          initialDelaySeconds: {{ .Values.healthcheck.readiness.initialDelaySeconds | default 5 }}
          periodSeconds: {{ .Values.healthcheck.readiness.periodSeconds | default 5 }}
          timeoutSeconds: {{ .Values.healthcheck.readiness.timeoutSeconds | default 3 }}
          failureThreshold: {{ .Values.healthcheck.readiness.failureThreshold | default 3 }}
        {{- end }}
        {{- end }}

        # =============================================================================
        # VARIÁVEIS DE AMBIENTE (Configuração Opcional)
        # =============================================================================
        {{- if .Values.env }}
        env:
        {{- toYaml .Values.env | nindent 8 }}
        {{- end }}

# PADRÕES OBRIGATÓRIOS:
# - Nome: {{ .Release.Name }}-{{ .Chart.Name }}
# - Labels: Todas as 6 labels kubernetes.io (metadata E template)
# - Selector: app.kubernetes.io/name e app.kubernetes.io/instance
# - Resources: Sempre configuráveis via .Values.resources
# - Image: Sempre configurável via .Values.image
# - Ports: Sempre configuráveis via .Values.port

# =============================================================================
# OBSERVAÇÕES IMPORTANTES
# =============================================================================
#
# ✅ OBRIGATÓRIO: Labels kubernetes.io em metadata
# ✅ OBRIGATÓRIO: Selector com name e instance
# ✅ OBRIGATÓRIO: Nome {{ .Release.Name }}-{{ .Chart.Name }}
# ✅ OBRIGATÓRIO: Resources configuráveis
# ✅ OPCIONAL: Health checks apenas se a app suportar
# ✅ OPCIONAL: Volumes apenas se necessário
# ✅ OPCIONAL: Env vars via .Values.config 

# =============================================================================
# EXTENSÕES OPCIONAIS (adicionar se necessário)
# =============================================================================

# Para variáveis de ambiente:
# env:
# - name: APP_ENV
#   value: production
# {{- with .Values.env }}
# {{- toYaml . | nindent 8 }}
# {{- end }}

# Para health checks:
# livenessProbe:
#   httpGet:
#     path: /health
#     port: http
#   initialDelaySeconds: 30
#   periodSeconds: 10

# Para volumes:
# volumeMounts:
# - name: data
#   mountPath: /data
# volumes:
# - name: data
#   persistentVolumeClaim:
#     claimName: "{{ .Release.Name }}-{{ .Chart.Name }}-data" 
