apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/component: {{ .Values.component | default "database" }}
    app.kubernetes.io/part-of: {{ .Chart.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/component: {{ .Values.component | default "database" }}
        app.kubernetes.io/part-of: {{ .Chart.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      {{- if and .Values.advanced.enabled .Values.advanced.postgresql.security }}
      securityContext:
        runAsUser: {{ .Values.advanced.postgresql.security.runAsUser }}
        runAsGroup: {{ .Values.advanced.postgresql.security.runAsGroup }}
        fsGroup: {{ .Values.advanced.postgresql.security.fsGroup }}
        runAsNonRoot: {{ .Values.advanced.postgresql.security.runAsNonRoot }}
      {{- end }}
      containers:
      - name: postgresql
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: postgresql
          containerPort: {{ .Values.networking.port | default 5432 }}
          protocol: TCP
        env:
        {{- if and .Values.advanced.enabled .Values.advanced.postgresql.env }}
        {{- range $key, $value := .Values.advanced.postgresql.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ .Release.Name }}-{{ .Chart.Name }}-credentials
        {{- if and .Values.advanced.enabled .Values.advanced.postgresql.health.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB:-${POSTGRES_USER}}" -h 127.0.0.1 -p {{ .Values.networking.port | default 5432 }}
          initialDelaySeconds: {{ .Values.advanced.postgresql.health.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.advanced.postgresql.health.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.advanced.postgresql.health.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.advanced.postgresql.health.liveness.failureThreshold }}
          successThreshold: {{ .Values.advanced.postgresql.health.liveness.successThreshold }}
        {{- else }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB:-${POSTGRES_USER}}" -h 127.0.0.1 -p {{ .Values.networking.port | default 5432 }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        {{- end }}
        {{- if and .Values.advanced.enabled .Values.advanced.postgresql.health.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB:-${POSTGRES_USER}}" -h 127.0.0.1 -p {{ .Values.networking.port | default 5432 }}
          initialDelaySeconds: {{ .Values.advanced.postgresql.health.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.advanced.postgresql.health.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.advanced.postgresql.health.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.advanced.postgresql.health.readiness.failureThreshold }}
          successThreshold: {{ .Values.advanced.postgresql.health.readiness.successThreshold }}
        {{- else }}
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB:-${POSTGRES_USER}}" -h 127.0.0.1 -p {{ .Values.networking.port | default 5432 }}
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.resources.cpu }}
            memory: {{ .Values.resources.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        {{- if .Values.advanced.enabled }}
        - name: config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        {{- if .Values.advanced.postgresql.initdb.scripts }}
        - name: initdb-scripts
          mountPath: /docker-entrypoint-initdb.d
        {{- end }}
        {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-{{ .Chart.Name }}-data
      {{- if .Values.advanced.enabled }}
      - name: config
        configMap:
          name: {{ .Release.Name }}-{{ .Chart.Name }}-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
      {{- if .Values.advanced.postgresql.initdb.scripts }}
      - name: initdb-scripts
        configMap:
          name: {{ .Release.Name }}-{{ .Chart.Name }}-config
          defaultMode: 0755
      {{- end }}
      {{- end }} 